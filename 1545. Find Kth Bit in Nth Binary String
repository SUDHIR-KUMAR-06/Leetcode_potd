class Solution {
public:
    string inverse(string s){
        string res="";
        for(int i=0;i<s.length();++i){
            if(s[i]=='0'){
                s[i]='1';
            }
            else{
                s[i]='0';
            }
            res+=s[i];
        }
        return res;
    }
    string rev(string s){
        string res="";
        for(int i=s.length()-1;i>=0;i--){
            res+=s[i];
        }
        return res;
    }

    char findKthBit(int n, int k) {
         // Base case: When n = 1, the binary string is "0"
        if (n == 1) return '0';
        
        // Find the length of the current string Sn, which is 2^n - 1
        int length = (1 << n) - 1;
        
        // Find the middle position
        int mid = length / 2 + 1;
        
        // If k is the middle position, return '1'
        if (k == mid) return '1';
        
        // If k is in the first half, find the bit in Sn-1
        if (k < mid) return findKthBit(n - 1, k);
        
        // If k is in the second half, find the bit in Sn-1 and invert it
        return findKthBit(n - 1, length - k + 1) == '0' ? '1' : '0';
    }
};
